# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import CummareApi.Clients.Subscribe_pb2 as Subscribe__pb2


class SubscribeTopicStub(object):
    """*
    Publish topic proto.

    In the PUB-SUB part, it is the PUB
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.subscribeTopic = channel.unary_stream(
                '/subscribe.SubscribeTopic/subscribeTopic',
                request_serializer=Subscribe__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=Subscribe__pb2.SubscribeResponse.FromString,
                )


class SubscribeTopicServicer(object):
    """*
    Publish topic proto.

    In the PUB-SUB part, it is the PUB
    """

    def subscribeTopic(self, request, context):
        """*
        Publish a message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubscribeTopicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'subscribeTopic': grpc.unary_stream_rpc_method_handler(
                    servicer.subscribeTopic,
                    request_deserializer=Subscribe__pb2.SubscribeRequest.FromString,
                    response_serializer=Subscribe__pb2.SubscribeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'subscribe.SubscribeTopic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SubscribeTopic(object):
    """*
    Publish topic proto.

    In the PUB-SUB part, it is the PUB
    """

    @staticmethod
    def subscribeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/subscribe.SubscribeTopic/subscribeTopic',
            Subscribe__pb2.SubscribeRequest.SerializeToString,
            Subscribe__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
